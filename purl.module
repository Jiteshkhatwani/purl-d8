<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\purl\Entity\Provider;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Form;

function purl_entity_base_field_info(EntityTypeInterface $entity_type) {

  if ($entity_type->id() !== 'menu_link_content') {
    return; 
  }
  var_dump($entity_type->id());
  var_dump(get_class($entity_type));
}

function purl_form_menu_edit_form_alter(&$form, $form_state) {
  $ids = \Drupal::entityQuery('purl_provider')->execute();
  $providers = Provider::loadMultiple($ids);

  $options = [null => '-- None --'];

  foreach ($providers as $provider) {
    $modifiers= [];
    foreach ($provider->getProviderPlugin()->getModifiers() as $modifier => $value) {
      $modifiers[$provider->id() . ':' . $modifier] = $modifier;
    }
    $options[$provider->getLabel()] = $modifiers;
  }

  $form['purl'] = [
    '#tree' => true,
    '#type' => 'fieldset',
    '#title' => 'Persistent URLs',
    '#collapsible' => false,
    '#collapsed' => false,
  ];

  $form['purl']['purl_provider'] = [
    '#type' => 'select',
    '#title' => 'PURL provider',
    '#value' => null,
    '#options' => $options
  ];
}

function purl_form_menu_link_content_menu_link_content_form_alter(&$form, FormStateInterface $form_state) {

  $ids = \Drupal::entityQuery('purl_provider')->execute();
  $providers = Provider::loadMultiple($ids);

  $menuLinkEntity = $form_state->getBuildInfo()['callback_object']->getEntity();
  $options = $menuLinkEntity->link->first()->options;
  var_dump($options);

  $purlOptions = isset($options['purl']) ? $options['purl'] : ['purl_modifier' => null];


  $options = [null => '-- None --'];

  foreach ($providers as $provider) {
    $modifiers= [];
    foreach ($provider->getProviderPlugin()->getModifiers() as $modifier => $value) {
      $modifiers[$provider->id() . ':' . $modifier] = $modifier;
    }
    $options[$provider->getLabel()] = $modifiers;
  }

  $form['purl'] = [
    '#tree' => true,
    '#type' => 'fieldset',
    '#title' => 'Persistent URLs',
    '#collapsible' => false,
    '#collapsed' => false,
  ];

  $form['purl']['purl_modifier'] = [
    '#type' => 'select',
    '#title' => 'PURL modifier',
    '#options' => $options,
    '#default_value' => $purlOptions['purl_modifier'],
  ];
  $form['#entity_builders'][] = 'purl_form_menu_link_content_menu_link_content_form_builder';
}

function purl_form_menu_link_content_menu_link_content_form_builder($entity_type, $type, &$form, FormStateInterface $form_state) {

  $menuLinkEntity = $form_state->getBuildInfo()['callback_object']->getEntity();

  if ($form_state->getValue('purl') && $form_state->getValue('purl')['purl_modifier']) {
    $purlOptions = $form_state->getValue('purl');
    $options = $menuLinkEntity->link->first()->options;
    $options['purl'] = $purlOptions;
    $menuLinkEntity->link->first()->options = $options;
  }
}

function purl_form_alter(&$form, $form_state) {
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function purl_form_node_type_form_alter(&$form, $form_state) {
  /* @var Drupal\node\NodeInterface $node */
  $node_type = $form_state->getFormObject()->getEntity();

  $form['purl'] = array(
    '#type' => 'details',
    '#title' => t('PURL settings'),
    '#group' => 'additional_settings',
  );
  $form['purl']['keep_context'] = array(
    '#type' => 'checkbox',
    '#title' => t('Keep context of the node.'),
    '#default_value' => $node_type->getThirdPartySetting('purl', 'keep_context', 0),
    '#description' => t('This allows a node-type PURL context.'),
  );

  $form['#entity_builders'][] = 'purl_form_node_type_form_builder';
}

/**
 * Entity form builder for the node type form to map some values to third party
 * settings
 */
function purl_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, $form_state) {
  if ($form_state->getValue('keep_context') == 1) {
    $type->setThirdPartySetting('purl', 'keep_context', $form_state->getValue('keep_context'));
    return;
  }

  $type->unsetThirdPartySetting('purl', 'keep_context');
}

/**
 * Implements hook_preprocess_html().
 */
function purl_preprocess_html(&$vars) {
  $init = \Drupal::requestStack();
  $request = $init->getCurrentRequest();
  $modifiers = $request->attributes->get('purl.matched_modifiers', []);

  foreach ($modifiers as $modifier) {
    foreach ($modifier as $key => $item) {
      if (!is_object($item)) {
        $vars['attributes']['class'][] = 'purl-' . $key . '-' . $item;
      }
    }
  }
}
